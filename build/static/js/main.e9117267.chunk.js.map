{"version":3,"sources":["hooks/useToggle.js","components/Nav.js","pages/Home.js","pages/Technology.js","pages/Digest.js","pages/About.js","components/Routes.js","hooks/useTournaments.js","components/Scoreboard.js","App.js","serviceWorker.js","index.js"],"names":["useToggle","initial","useState","isActive","setIsActive","toggleButton","active","Nav","dropDown","useRef","dropDownBox","useEffect","current","className","console","log","id","to","ref","buttonWidth","Home","Technology","Digest","About","Routes","exact","path","useTournaments","playerData","setPlayerData","basicInfo","golferData","map","v","firstName","FirstName","lastName","LastName","getPlayers","Scoreboard","index","Math","floor","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oxxhFAQeA,G,MANG,WAAoB,IAAnBC,EAAkB,0DACDC,mBAASD,GADR,mBAC1BE,EAD0B,KAChBC,EADgB,KAE3BC,EAAe,kBAAMD,GAAY,SAAAE,GAAM,OAAKA,MAClD,MAAO,CAAEH,EAAUE,KCyCRE,EAvCH,WAAM,MAEqBP,IAFrB,mBAENG,EAFM,KAEIE,EAFJ,KAKRG,EAAWC,mBACXC,EAAcD,mBAUpB,OARAE,qBAAU,WAE8B,gBAA/BH,EAASI,QAAQC,UAAgCL,EAASI,QAAQC,UAAY,cAAkBL,EAASI,QAAQC,UAAY,cAC9HC,QAAQC,IAAIP,EAASI,QAAQC,aAGlC,CAACV,IAGA,yBAAKU,UAAU,mBACX,kBAAC,IAAD,CAAMG,GAAG,YAAYH,UAAU,WAAWI,GAAG,KAA7C,cACA,yBAAKJ,UAAU,gBAAgBK,IAAKR,GAChC,6BACI,kBAAC,IAAD,CAA0BG,UAAU,WAAWM,YAAa,GAAIhB,SAAUA,EAAUE,aAAcA,KAEtG,yBAAKQ,UAAU,cAAcK,IAAKV,GAC9B,6BACI,kBAAC,IAAD,CAAMK,UAAU,WAAWI,GAAG,eAA9B,eAEJ,6BACI,kBAAC,IAAD,CAAMJ,UAAU,WAAWI,GAAG,WAA9B,WAEJ,6BACI,kBAAC,IAAD,CAAMJ,UAAU,WAAWI,GAAG,UAA9B,c,OC5BTG,G,MAPF,WACT,OACI,yBAAKP,UAAU,WCIRQ,EAPI,WACf,OACI,yBAAKR,UAAU,gBCMRS,EARA,WACX,OACI,yBAAKT,UAAU,YCMRU,EARD,WACV,OACI,yBAAKV,UAAU,WCwBRW,EAnBA,WACX,OACI,kBAAC,IAAD,CAAQX,UAAU,UACd,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,KACd,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,eACd,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,WACd,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,UACd,kBAAC,EAAD,S,wBCODC,EA1BQ,WAAO,IAAD,EAEazB,mBAAS,CAAC,eAFvB,mBAEjB0B,EAFiB,KAELC,EAFK,KAuBzB,OAnBAlB,qBAAU,YACa,WAGf,IAAMmB,EAAYC,EAAWC,KAAI,SAAAC,GAAC,MAAK,CACnCC,UAAWD,EAAEE,UACbC,SAAUH,EAAEI,aAIhBR,EAAcC,GAIlBQ,KAGD,IAEIV,GCLIW,EAfI,WAEf,IAAMX,EAAaD,IAEnB,OACI,yBAAKd,UAAU,cACX,kBAAC,IAAD,MACK,gBAAE2B,EAAF,EAAEA,MAAF,OACG,yBAAK3B,UAAU,SAASe,EAAWa,KAAKC,MAAMF,EAAQZ,EAAWe,SAAST,UAA1E,IAAsFN,EAAWa,KAAKC,MAAMF,EAAQZ,EAAWe,SAASP,eCU7IQ,MAjBf,WAEE,OACE,yBAAK/B,UAAU,OACb,kBAAC,IAAD,KACE,yBAAKA,UAAU,sBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,yBAAKA,UAAU,IACb,kBAAC,EAAD,UCLUgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEI,kBAAC,EAAD,OAGJC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.e9117267.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst useToggle = (initial=false) => {\n    const [isActive, setIsActive] = useState(initial);\n    const toggleButton = () => setIsActive(active => !active);\n    return [ isActive, toggleButton ];\n}\n\nexport default useToggle;","import React, { useEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport { HamburgerCollapseReverse } from 'react-animated-burgers'\n\nimport '../styles/Nav.css';\nimport useToggle from '../hooks/useToggle';\n\nconst Nav = () => {\n    //set isActive vairable into state to keep track of side nav status\n    const [ isActive, toggleButton ] = useToggle();\n\n    //register dropDown and dropDownBox elements into reference using \n    const dropDown = useRef();\n    const dropDownBox = useRef();\n\n    useEffect(()=> {\n        const toggleSideMenu = () => {\n            (dropDown.current.className === 'menu active') ? (dropDown.current.className = 'menu hidden') : (dropDown.current.className = 'menu active');\n            console.log(dropDown.current.className);\n        }\n        toggleSideMenu();\n    }, [isActive]);\n\n    return (\n        <div className=\"Nav see-through\">\n            <Link id=\"home-icon\" className=\"Nav-link\" to=\"/\">Shortgrass</Link>\n            <div className=\"Nav-drop-down\" ref={dropDownBox}>\n                <div>\n                    <HamburgerCollapseReverse className=\"Nav-link\" buttonWidth={30} isActive={isActive} toggleButton={toggleButton}/>\n                </div>\n                <div className=\"menu active\" ref={dropDown}>\n                    <div>\n                        <Link className=\"Nav-link\" to=\"/technology\">Technology</Link>                    \n                    </div>\n                    <div>\n                        <Link className=\"Nav-link\" to=\"/digest\">Digest</Link>                    \n                    </div>\n                    <div>\n                        <Link className=\"Nav-link\" to=\"/about\">About</Link>                    \n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Nav;","import React from 'react';\nimport '../styles/Home.css';\n\nconst Home = () => {\n    return (\n        <div className=\"Home\">\n        </div>\n    );\n}\n\nexport default Home;","import React from 'react';\n\nconst Technology = () => {\n    return (\n        <div className=\"Technology\">\n        </div>\n    );\n}\n\nexport default Technology;","import React from 'react';\n\nconst Digest = () => {\n    return (\n        <div className=\"Digest\">\n\n        </div>\n    );\n}\n\nexport default Digest;","import React from 'react';\n\nconst About = () => {\n    return (\n        <div className=\"About\">\n\n        </div>\n    );\n}\n\nexport default About;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from '../pages/Home';\n\nimport '../styles/Nav.css';\nimport Technology from '../pages/Technology';\nimport Digest from '../pages/Digest';\nimport About from '../pages/About';\n\nconst Routes = () => {\n    return (\n        <Switch className=\"Routes\">\n            <Route exact path=\"/\">\n                <Home/>\n            </Route>\n            <Route exact path=\"/technology\">\n                <Technology/>\n            </Route>\n            <Route exact path=\"/digest\">\n                <Digest/>\n            </Route>\n            <Route exact path=\"/about\">\n                <About/>\n            </Route>\n        </Switch>\n    );\n}\n\nexport default Routes;","import { useState, useEffect } from 'react';\nimport golferData from '../data/golfer-data.json';\n\nconst useTournaments = () => {\n\n    const [ playerData, setPlayerData ] = useState(['Loading...']);\n\n    useEffect(() => {\n        const getPlayers = () => {\n\n            //map only desired data\n            const basicInfo = golferData.map(v => ({\n                firstName: v.FirstName,\n                lastName: v.LastName\n            }));\n\n            //set player data to new player info array\n            setPlayerData(basicInfo);\n        }\n\n        //call getPlayers if triggered\n        getPlayers();\n\n        //execute only on first render\n    }, []);\n        \n    return playerData;\n}\n\nexport default useTournaments;","import React from 'react';\nimport Ticker from 'react-ticker';\nimport '../styles/Scoreboard.css';\nimport useTournaments from '../hooks/useTournaments';\n\n/** Component Documentation Here */\nconst Scoreboard = () => {\n\n    const playerData = useTournaments();\n\n    return (\n        <div className=\"Scoreboard\">\n            <Ticker>\n                {({index}) => (\n                    <div className=\"Score\">{playerData[Math.floor(index % playerData.length)].firstName} {playerData[Math.floor(index % playerData.length)].lastName}</div>\n                )}\n            </Ticker>\n        </div>\n    );\n}\n\nexport default Scoreboard;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport './App.css';\nimport Nav from './components/Nav';\nimport Routes from './components/Routes';\nimport Scoreboard from './components/Scoreboard';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <div className=\"sticky see-through\">\n          <Scoreboard/>\n          <Nav/>\n        </div>\n        <div className=\"\">\n          <Routes/>\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// import { Provider } from 'react-redux';\n// import { createStore } from 'redux';\n// import rootReducer from './reducers/rootReducer';\n// const store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <Provider store={store}> */}\n      <App />    \n    {/* </Provider> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}