{"version":3,"sources":["pages/golf-hole.svg","hooks/useToggle.js","components/Nav.js","pages/Home.js","pages/Technology.js","pages/Digest.js","pages/About.js","components/Routes.js","hooks/useTournaments.js","components/Scoreboard.js","App.js","actions/actionCreators.js","actions/actionTypes.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["module","exports","useToggle","initial","useState","isActive","setIsActive","toggleButton","active","Nav","useSelector","v","backgrounds","color","backgroundColor","dropDown","useRef","dropDownBox","useEffect","current","className","console","log","id","to","style","ref","buttonWidth","barColor","Home","alt","src","golfHole","width","spy","smooth","hashSpy","offset","duration","fontSize","border","cursor","icon","faChevronDown","faChevronUp","Technology","Digest","About","Routes","exact","path","useTournaments","playerData","setPlayerData","basicInfo","golferData","map","firstName","FirstName","lastName","LastName","getPlayers","Scoreboard","borderColor","index","key","uuid","Math","floor","length","App","scrollY","useScrollPosition","dispatch","useDispatch","useLayoutEffect","type","payload","document","querySelectorAll","forEach","val","Boolean","window","location","hostname","match","INITIAL","rootReducer","state","action","store","createStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ee7058f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/golf-hole.244da0c0.svg\";","import { useState } from 'react';\n\nconst useToggle = (initial=false) => {\n    const [isActive, setIsActive] = useState(initial);\n    const toggleButton = () => setIsActive(active => !active);\n    return [ isActive, toggleButton ];\n}\n\nexport default useToggle;","import React, { useEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport { HamburgerCollapseReverse } from 'react-animated-burgers'\n\nimport '../styles/Nav.css';\nimport useToggle from '../hooks/useToggle';\nimport { useSelector } from 'react-redux';\n\nconst Nav = () => {\n\n    const { color, backgroundColor } = useSelector(v => (v.backgrounds));\n\n    //set isActive vairable into state to keep track of side nav status\n    const [ isActive, toggleButton ] = useToggle();\n\n    //register dropDown and dropDownBox elements into reference using \n    const dropDown = useRef();\n    const dropDownBox = useRef();\n\n    useEffect(()=> {\n        const toggleSideMenu = () => {\n            (dropDown.current.className === 'menu active') ? (dropDown.current.className = 'menu hidden') : (dropDown.current.className = 'menu active');\n            console.log(dropDown.current.className);\n        }\n        toggleSideMenu();\n    }, [isActive]);\n\n    return (\n        <div className=\"Nav\">\n            <Link id=\"home-icon\" className=\"Nav-link\" to=\"/\" style={{ color }}>Shortgrass</Link>\n            <div className=\"Nav-drop-down\" ref={dropDownBox} style={{ backgroundColor }}>\n                <div>\n                    <HamburgerCollapseReverse className=\"Nav-link\" buttonWidth={30} isActive={isActive} toggleButton={toggleButton} barColor={color}/>\n                </div>\n                <div className=\"menu active\" ref={dropDown}>\n                    <div>\n                        <Link className=\"Nav-link\" to=\"/technology\" style={{ color }}>Technology</Link>                    \n                    </div>\n                    <div>\n                        <Link className=\"Nav-link\" to=\"/digest\" style={{ color }}>Digest</Link>                    \n                    </div>\n                    <div>\n                        <Link className=\"Nav-link\" to=\"/about\" style={{ color }}>About</Link>                    \n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Nav;","import React from 'react';\nimport '../styles/Home.css';\nimport { Link } from \"react-scroll\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronUp, faChevronDown } from '@fortawesome/free-solid-svg-icons'\nimport { useSelector } from 'react-redux';\nimport golfHole from './golf-hole.svg';\n\n\n\nconst Home = () => {\n\n    const { backgroundColor, color } = useSelector(v => (v.backgrounds));\n\n    return (\n        <div className=\"Home\" style={{ backgroundColor, color }}>\n            <section className=\"Section\" id=\"first-section\">\n                <div className=\"SectionBody\">\n                    <h1>Technology</h1>\n                    <img alt=\"\" src={golfHole} width=\"500px\"/>\n                </div>\n                <div className=\"SectionChevron\">\n                    <Link \n                    to='second-section'\n                    spy={true}\n                    smooth={true}\n                    hashSpy={true}\n                    offset={-100}\n                    duration={1000}\n                    >\n                        <button style={{fontSize: '40px', border: 'none', backgroundColor: 'transparent', cursor: 'pointer', color}}><FontAwesomeIcon icon={faChevronDown} color={color}/></button>\n                    </Link>                \n                </div>\n            </section>\n            <section className=\"Section\" id=\"second-section\">\n                <div className=\"SectionBody\">\n                    <h1>Digest</h1>\n                </div>\n                <div className=\"SectionChevron\">\n                    <Link \n                    to='third-section'\n                    spy={true}\n                    smooth={true}\n                    hashSpy={true}\n                    offset={-100}\n                    duration={1000}\n                    >\n                        <button style={{fontSize: '40px', border: 'none', backgroundColor: 'transparent', cursor: 'pointer'}}><FontAwesomeIcon icon={faChevronDown} color={color}/></button>\n                    </Link>                \n                </div>\n            </section>\n            <section className=\"Section\" id=\"third-section\">\n                <div className=\"SectionBody\">\n                    <h1>About</h1>\n                </div>\n                <div className=\"SectionChevron\">\n                    <Link \n                    to='first-section'\n                    spy={true}\n                    smooth={true}\n                    hashSpy={true}\n                    offset={-100}\n                    duration={1000}\n                    >\n                        <button style={{fontSize: '40px', border: 'none', backgroundColor: 'transparent', cursor: 'pointer'}}><FontAwesomeIcon icon={faChevronUp} color={color}/></button>\n                    </Link>                \n                </div>\n            </section>\n\n        </div>\n    );\n}\n\nexport default Home;","import React from 'react';\n\nconst Technology = () => {\n    return (\n        <div className=\"Technology\">\n        </div>\n    );\n}\n\nexport default Technology;","import React from 'react';\n\nconst Digest = () => {\n    return (\n        <div className=\"Digest\">\n\n        </div>\n    );\n}\n\nexport default Digest;","import React from 'react';\n\nconst About = () => {\n    return (\n        <div className=\"About\">\n\n        </div>\n    );\n}\n\nexport default About;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from '../pages/Home';\n\nimport '../styles/Nav.css';\nimport Technology from '../pages/Technology';\nimport Digest from '../pages/Digest';\nimport About from '../pages/About';\n\nconst Routes = () => {\n    return (\n        <Switch className=\"Routes\">\n            <Route exact path=\"/\">\n                <Home/>\n            </Route>\n            <Route exact path=\"/technology\">\n                <Technology/>\n            </Route>\n            <Route exact path=\"/digest\">\n                <Digest/>\n            </Route>\n            <Route exact path=\"/about\">\n                <About/>\n            </Route>\n        </Switch>\n    );\n}\n\nexport default Routes;","import { useState, useEffect } from 'react';\nimport golferData from '../data/golfer-data.json';\n\nconst useTournaments = () => {\n\n    const [ playerData, setPlayerData ] = useState(['Loading...']);\n\n    useEffect(() => {\n        const getPlayers = () => {\n\n            //map only desired data\n            const basicInfo = golferData.map(v => ({\n                firstName: v.FirstName,\n                lastName: v.LastName\n            }));\n\n            //set player data to new player info array\n            setPlayerData(basicInfo);\n        }\n\n        //call getPlayers if triggered\n        getPlayers();\n\n        //execute only on first render\n    }, []);\n        \n    return playerData;\n}\n\nexport default useTournaments;","import React from 'react';\nimport Ticker from 'react-ticker';\nimport '../styles/Scoreboard.css';\nimport useTournaments from '../hooks/useTournaments';\nimport { useSelector } from 'react-redux';\nimport { v4 as uuid } from 'uuid';\n\n/** Component Documentation Here */\nconst Scoreboard = () => {\n\n    const playerData = useTournaments();\n\n    const { backgroundColor, color } = useSelector(v => (v.backgrounds));\n\n    return (\n        <div className=\"Scoreboard\" style={{borderColor: color, color, backgroundColor}}>\n            <Ticker style={{ color }}>\n                {({index}) => (\n                    <div className=\"Score\" key={uuid()} style={{ color }}>{playerData[Math.floor(index % playerData.length)].firstName} {playerData[Math.floor(index % playerData.length)].lastName}</div>\n                )}\n            </Ticker>\n        </div>\n    );\n}\n\nexport default Scoreboard;\n","import React, { useLayoutEffect } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport './App.css';\nimport Nav from './components/Nav';\nimport Routes from './components/Routes';\nimport Scoreboard from './components/Scoreboard';\nimport useScrollPosition from '@react-hook/window-scroll'\nimport { useDispatch } from 'react-redux';\nimport { blackBackground, blueBackground, whiteBackground } from './actions/actionCreators';\n\nfunction App() {\n\n  const scrollY = useScrollPosition(60);\n\n  const dispatch = useDispatch();\n\n  useLayoutEffect(() => {\n    if (scrollY > 500 && scrollY <= 1000) {\n      dispatch(blackBackground());\n      document.querySelectorAll('.Score').forEach((val) => {\n        val.style.color = 'white';\n      });\n    } else if (scrollY > 1000) {\n      dispatch(blueBackground());\n      document.querySelectorAll('.Score').forEach((val) => {\n        val.style.color = 'white';\n      });\n    } else {\n      dispatch(whiteBackground());\n      document.querySelectorAll('.Score').forEach((val) => {\n        val.style.color = 'black';\n      });\n    }\n  }, [scrollY, dispatch]);\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <div className=\"sticky see-through\">\n          <Scoreboard/>\n          <Nav/>\n        </div>\n        <div className=\"\">\n          <Routes/>\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;","import { BLACK, BLUE, WHITE } from './actionTypes';\n\nconst blackBackground = () => {\n    return {\n        type: BLACK,\n        payload: {\n            backgroundColor: 'black',\n            color: 'white'\n        }\n    }\n}\n\nconst whiteBackground = () => {\n    return {\n        type: WHITE,\n        payload: {\n            backgroundColor: 'white',\n            color: 'black'\n        }\n    }\n}\n\nconst blueBackground = () => {\n    return {\n        type: BLUE,\n        payload: {\n            backgroundColor: 'blue',\n            color: 'white'\n        }\n    }\n}\n\nexport { blackBackground, blueBackground, whiteBackground };","export const BLACK = 'BLACK';\nexport const WHITE = 'WHITE';\nexport const BLUE = 'BLUE';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { BLACK, BLUE, WHITE } from '../actions/actionTypes';\n\nconst INITIAL = { backgrounds: { backgroundColor: 'white', color: 'black' } }\n\nconst rootReducer = (state=INITIAL, action) => {\n    switch (action.type) {\n        case WHITE:\n            return { ...state, backgrounds: { backgroundColor: action.payload.backgroundColor, color: action.payload.color } };\n        case BLACK:\n            return { ...state, backgrounds: { backgroundColor: action.payload.backgroundColor, color: action.payload.color } };\n        case BLUE:\n            return { ...state, backgrounds: { backgroundColor: action.payload.backgroundColor, color: action.payload.color } };\n        default:\n            return state;\n    }\n}\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers/rootReducer';\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />    \n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}